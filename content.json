{"meta":{"title":"Hyejin Shin","subtitle":"IT blog / Thanks to everyone!","description":null,"author":"Hyejin Shin","url":"https://dullyshin.github.io"},"pages":[],"posts":[{"title":"정보처리기사 비전공자 합격 후기","slug":"Engineer-Information-Processing","date":"2018-08-28T14:12:33.000Z","updated":"2018-08-28T16:07:38.074Z","comments":true,"path":"2018/08/28/Engineer-Information-Processing/","link":"","permalink":"https://dullyshin.github.io/2018/08/28/Engineer-Information-Processing/","excerpt":"","text":"정보처리기사 비전공자 합격 후기안녕하세요!오늘은 비전공자 정보처리기사 필기 합격 후기를 남기려고 합니다.우선 저는 경영학과를 졸업하였구요. Java, Database와는 관계 없는 삶을 살았습니다.프로그래밍 학원에서 통합 SW 프로그래밍을 3개월 반 동안 공부를 했습니다. 2018년 제3회 필기 시험을 보았구요. 지금은 필기 통과 후 정보처리기사 실기 시험을 준비하고 있습니다. 시험 준비 기간 : 약 한달 저는 필기 원서 접수를 한 후부터 공부를 시작하였습니다. 7월 25일에 원서 접수를 하고 8월 19일에 시험을 보았습니다. 우선 이기쥬희의 이기라이프에 정보처리기사 독학-필기 합격 요약집-을 보시고 합격하신 후기가 많더라구요. 저도 다운로드 받았습니다. 아주 감사합니다! 하지만 저는 2018 시나공 서머리로 공부하였는데요. 이유는 한달이라는 기간안에 요약집을 보고 공부하지 않으면 엄청난 양을 다 공부할 수 없는 것을 알기 때문입니다. 더해서 프린터기가 없어서 컴퓨터로만 공부하니 무언가 허전하더라구요. 장비병이 있나봅니다. 돈을 써야지만 뭔가 한 것 같은 기분에 무언가를 시작하면 장비에 돈을 투자하게 되더라구요… 그래서 책을 질렀어요. 하이튼 그렇게 공부를 시작하였습니다. 책을 공부하면서 이해가 안가는 부분이 나오면 연결된 QR코드를 사용하여 동영상으로 공부하였습니다. 하지만 한달이라는 시간은 정말 짧은 시간이었습니다. 도저히 책 한권을 전부 보고 이해할 수 없더라구요. 그리고 요약본이라 그런지 설명이 자세히 나온 것이 아니라 짧게 요약되어 있어 더욱 무슨 뜻인지 이해가지 않더라구요. 저의 정보처리기사 공부법저와 같이 시간이 모자르고 모든 양을 공부하고 싶지 않다면 저의 공부법을 참고해 주세요. 솔직하게 저희는 평균 60점을 넘기면 합격합니다. 저는 평균 60점에 목표를 맞추었습니다. 우선 최근 3년간의 정보처리기사 기출문제를 풉니다. 모르겠더라도 일단 찍어보세요. 문제에 익숙해지는 겁니다. 어떤 형식으로 문제가 기출되는지 확인합시다. 채점을 해보세요. 점수를 확인해보세요. (5과목 평균 60점이 합격입니다.) 지금 상태로 진짜 시험을 받았다면 어떻게 될지 상상해보세요. 틀린 것과 모르는 문제의 해석을 확인하고 이해하세요. 아무리 쳐다봐도 도통 모르겠다면 ‘이 문제는 이 답이야’ 하고 외워버리자구요. 답을 가리고 틀린 문제와 모르는 문제를 3번 반복해서 풀어보세요. 3번을 반복해서 풀면서 모르겠을 때마다 관련 챕터를 한번씩 읽어보았어요. 2018 시나공 서머리책이 좋은 점은 해당 기출 문제에 관련 요약 설명이 어디에 있는지 표시해 준다는 점이예요. 만약 시간이 남으신다면 최근 5년간의 기출문제를 풉니다. 저는 위와 같이 기출문제를 중심으로 집중 공부하였습니다. 비슷한 유형으로 계속 출제 되고 있는 것을 우리 모두 알고 있는 것 같은데… 정보처리기사 과목 종류 데이터 베이스 : 많이 풀어보시고 외워야 하는 부분이 많습니다. 전자계산기 구조 : 계산문제는 반드시 이해하고 풀어보세요. (주의)과락에 주의하세요! 운영체제 : 많이 풀어보시고 외워야 하는 부분이 많습니다. 소프트웨어공학 : 많이 풀어보시고 외워야 하는 부분이 많습니다. 데이터 통신 : 아주 생소하게 느껴지는 부분입니다. 많이 보고 외워야할 부분이 많습니다. 정보처리기사관련 무료 사이트 추천아래의 추천 사이트들은 무료로 이용하실 수 있습니다. 도타비 문제 은행정보처리기사 기출문제를 인터넷만 되면 풀어보실 수 있습니다. 강추! 시나공 자료실가입하시면 기출문제 정답과 해설을 무료로 확인 하실 수 있습니다. 이기쥬희의 이기라이프2017 정보처리기사 독학-필기 합격 요약집-을 보시고 합격하신 후기가 많더라구요. 저도 다운로드 받았습니다. 다시 한번 더 감사합니다! 결론 최소 3번씩 최근 3년간의 기출 문제를 풀어보고 정리하세요. 우리는 100점이 아니라 평균 60점만 맞으면 합격하는 것을 유의해주세요. 과락에 주의하세요. (최저 40점이하로 떨어지면 안되요.) 정보처리기사 기출문제를 많이 풀고 외워야할 부분이 많습니다. 혹시 궁금하신 점이 있으면 물어봐 주세요! 아, 그리고 시험 날 컴퓨터용 사인펜과 주민등록증 챙겨가세요. (저는 수학에 엄청 약해 계산기를 지참하고 갔습니다.)","categories":[{"name":"Review","slug":"Review","permalink":"https://dullyshin.github.io/categories/Review/"}],"tags":[{"name":"정보처리기사 필기","slug":"정보처리기사-필기","permalink":"https://dullyshin.github.io/tags/정보처리기사-필기/"},{"name":"정보처리기사 독학","slug":"정보처리기사-독학","permalink":"https://dullyshin.github.io/tags/정보처리기사-독학/"},{"name":"정보처리기사 공부법","slug":"정보처리기사-공부법","permalink":"https://dullyshin.github.io/tags/정보처리기사-공부법/"},{"name":"정보처리기사 단기간","slug":"정보처리기사-단기간","permalink":"https://dullyshin.github.io/tags/정보처리기사-단기간/"},{"name":"비전공자 정보처리기사","slug":"비전공자-정보처리기사","permalink":"https://dullyshin.github.io/tags/비전공자-정보처리기사/"},{"name":"Engineer-Information-Processing","slug":"Engineer-Information-Processing","permalink":"https://dullyshin.github.io/tags/Engineer-Information-Processing/"}]},{"title":"Hexo에서 사용 가능한 태그들","slug":"Hexo-tags","date":"2018-08-27T15:18:39.000Z","updated":"2018-08-28T14:16:53.821Z","comments":true,"path":"2018/08/28/Hexo-tags/","link":"","permalink":"https://dullyshin.github.io/2018/08/28/Hexo-tags/","excerpt":"","text":"Hexo 태그 플러그인 Hexo Tag Plugins핵소 태그 플러그인은 포스트의 태그와는 다릅니다. Hexo에서는 Markdown문법을 사용할 수 있지만, Hexo에서 제공하는 태그 기능도 갖추고 있습니다. 한 번 자세히 알아봅시다. 인용구 Block Quote인용구를 post, 소스, 제목에 추가하기 위한 완벽한 방법입니다. 옵션으로 인용구의 원작자를 추가할 수도 있습니다. 기본123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 인자가 없는 일반 인용123&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 책 구절 인용하기123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake Twitter 인용하기123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125; NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 웹 게시물 인용하기123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 코드 블락 Code Block코드 조각(snippet)을 포스트에 추가할 수 있는 유용한 기능입니다. 기본123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 일반 code block 사용하기123&#123;% codeblock %&#125;alert(&apos;Hello World!&apos;);&#123;% endcodeblock %&#125; 1alert(&apos;Hello World!&apos;); 언어 지정하기123&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125; 1[rectangle setX: 10 y: 10 width: 20 height: 20]; Code block에 제목 넣기123&#123;% codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125; Array.map1array.map(callback[, thisArg]) 제목과 URL 넣기1234&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3]&#123;% endcodeblock %&#125; _.compactUnderscore.js12_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3] Backtick 코드 블락 Backtick(`) Code Block Backtick(`)은 키보드에서 ~와 같이 있습니다. 이 방법은 code block을 사용하는 것과 같습니다만 block을 구분하기 위해 세 개의 역 따옴표를 사용하는 점이 다릅니다. 기본 사용법1[language] [title] [url] [link text] code snippet Pull Quotepull 인용을 추가하기 위한 방법은 다음과 같습니다. 123&#123;% pullquote [class] %&#125;content&#123;% endpullquote %&#125; jsFiddlejsFiddle을 포함시킬 수 있습니다. HTML, CSS, JavaScript 코드를 Gist에서 작성한 후에 공유할 수 있습니다. jsFiddle에서 작성한 후 윗 부분에 ‘Embed’ 부분을 클릭 한 후 ‘Embed snippet’ 에서 공유 소스코드를 확인 할 수 있습니다. ‘shorttag’ 부분에 jsfiddle.net/ 뒤에 오는 코드를 사용하시면 됩니다. 12jsFiddle 공유 소스&lt;script async src=&quot;//jsfiddle.net/szktx0gb/6/embed/html,css,result/&quot;&gt;&lt;/script&gt; 1&#123;% jsfiddle szktx0gb html,css,result %&#125; GistGist를 포함시킬 수 있습니다. Github에서 제공하는 서비스로, 간단한 코드를 Gist에서 작성한 후에 공유할 수 있습니다. 작성 후 공유 버튼을 누르면 아래와 같은 소스코드를 확인할 수 있습니다. 이 코드의 마지막 부분을 ‘gist_id’ 부분에 추가합니다. 12Gist 공유 소스&lt;script src=&quot;https://gist.github.com/DullyShin/49a2c3862f3aad9627a5e3fed3e3a9bc.js&quot;&gt;&lt;/script&gt; 1&#123;% gist 49a2c3862f3aad9627a5e3fed3e3a9bc %&#125; iframeiframe을 포함시킬 수 있습니다.1&#123;% iframe url [width] [height] %&#125; Image이미지의 사이즈를 지정하여 포함시킬 수 있습니다.1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; Linktarget=”_blank” 속성으로 링크를 포함시킬 수 있습니다. 1&#123;% link text url [external] [title] %&#125; Include Codesource/downloads/code 폴더에 있는 코드를 포함시킬 수 있습니다. 1&#123;% include_code [title] [lang:language] path/to/file %&#125; YouTubeYouTube video를 포함시킬 수 있습니다. 1&#123;% youtube video_id %&#125; video_id :유튜브에서 비디오 공유를 눌러서 나오는 url 의 뒷 부분이 해당 비디오의 고유한 아이디입니다. VimeoVimeo video를 포함시킬 수 있습니다.1&#123;% vimeo video_id %&#125; Include Posts자신의 블로그에 다른 포스트 링크를 포함시킬 수 있습니다. 12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; slug: slug 는 포스트의 제목을 말합니다. Hexo 에서는 파일 제목이 url 이 되므로 포스트 파일 만들 때 사용한 파일명을 입력하면 됩니다. post_path: 포스트 제목을 입력하면 해당 포스트의 경로가 표시됩니다. post_link: 포스트 제목을 입력하면 해당 포스트의 링크가 생성됩니다. 1&#123;% post_link Hexo-hello-world %&#125; Hexo 처음 포스트하기 Include Assets포스트의 asset을 포함시킬 수 있습니다. 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; Raw특정 컨텐츠가 당신의 포스트 내에서 문제를 일으킨다면, raw 태그를 사용하여 감싸주세요. 그러면 렌더링 에러를 피할 수 있습니다. 123&#123;% raw %&#125;content&#123;% endraw %&#125; 참고https://hexo.io/ko/docs/tag-plugins.htmlhttps://futurecreator.github.io/2016/06/19/hexo-tag-plugins/ Related posts markdown MarkdownEditor Hexo error","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://dullyshin.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dullyshin.github.io/tags/hexo/"},{"name":"Hexo Tag Plugins","slug":"Hexo-Tag-Plugins","permalink":"https://dullyshin.github.io/tags/Hexo-Tag-Plugins/"},{"name":"Block Quote","slug":"Block-Quote","permalink":"https://dullyshin.github.io/tags/Block-Quote/"},{"name":"Gist","slug":"Gist","permalink":"https://dullyshin.github.io/tags/Gist/"},{"name":"jsFiddle","slug":"jsFiddle","permalink":"https://dullyshin.github.io/tags/jsFiddle/"},{"name":"YouTube","slug":"YouTube","permalink":"https://dullyshin.github.io/tags/YouTube/"}]},{"title":"PostgreSql 란?","slug":"PostgreSQL-Basic","date":"2018-08-27T13:36:57.000Z","updated":"2018-08-27T14:12:43.981Z","comments":true,"path":"2018/08/27/PostgreSQL-Basic/","link":"","permalink":"https://dullyshin.github.io/2018/08/27/PostgreSQL-Basic/","excerpt":"","text":"PostgreSql 란우선 PostgreSQL은 포스트-그레스-큐엘 [Post-Gres-Q-L]로 발음한다. PostgreSQL은 확장 가능성 및 표준 준수를 강조하는 객체-관계형 데이터베이스 관리 시스템(ORDBMS)의 하나이다. BSD 허가권으로 배포되며 오픈소스 개발자 및 관련 회사들이 개발에 참여하고 있다. 특징점유연한 객체 생성다른 관계형 데이터베이스 시스템과 달리, 연산자, 복합 자료형, 집계 함수, 자료형 변환자, 확장 기능 등 다양한 데이터베이스 객체를 사용자가 임의로 만들 수 있는 기능을 SQL 차원에서 제공한다. 이런 특징은 단순한 자료 저장소로써의 기능을 넘어 마치 하나의 새로운 프로그래밍 언어처럼 개발자의 창의성에 따라 무한한 기능을 손쉽게 구현할 수 있도록 한다. 상속java 또는 C++ 프로그래밍 언어와 같이 테이블을 만들어 그 테이블 상속 기능을 이용해 하위 테이블을 만들 수 있다. 테이블에 저장된 자료는 상위 테이블을 조회하면, 해당 테이블의 하위 테이블에 포함된 모든 자료를 조회할 수 있으며, 하위 테이블을 만들 때, 상위 테이블의 칼럼을 그대로 상속 받으면서, 하위 테이블에만 속하는 칼럼을 추가로 만들 수 있다. 함수때때로, ‘저장 프로시저’라고 불리는 SQL문으로 작성된 함수를 서버환경에서 사용할 수 있다. 비록 다른 언어와는 달리 제어문과 반복문을 사용하지는 못하지만, 다른 언어와 결합시킬 수 있다. 일부 언어에서는 심지어 트리거 내부에서 실행시킬 수 있다. 이러한 언어의 예는 다음과 같다. PL/pgSQL (오라클의 PL/SQL과 유사하다) 스크립트 언어를 통한 지원 (예, PL/Python, PL/php, PL/Perl) 컴파일 언어를 통한 지원 (예, C/C++, PL/Java) 통계적 언어를 통한 지원 (예, PL/R) PostgreSQL은 테이블에 대한 질의 결과를 반환하기 위한 ‘행 반환 함수’를 지원한다. 실행권한은 함수 작성자 및, 실행자 모두에게 있다. 참조http://www.gurubee.net/lecture/2929https://d2.naver.com/helloworld/227936https://ko.wikipedia.org/wiki/PostgreSQL","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"SQL","slug":"Programming/SQL","permalink":"https://dullyshin.github.io/categories/Programming/SQL/"}],"tags":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/tags/Programming/"},{"name":"SQL","slug":"SQL","permalink":"https://dullyshin.github.io/tags/SQL/"},{"name":"PostgreSQL_Basic","slug":"PostgreSQL-Basic","permalink":"https://dullyshin.github.io/tags/PostgreSQL-Basic/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://dullyshin.github.io/tags/PostgreSQL/"}]},{"title":"Mailto 태그","slug":"HTML-MailtoTag","date":"2018-08-26T18:25:29.000Z","updated":"2018-08-26T18:36:53.010Z","comments":true,"path":"2018/08/27/HTML-MailtoTag/","link":"","permalink":"https://dullyshin.github.io/2018/08/27/HTML-MailtoTag/","excerpt":"","text":"mailto 태그를 잘 활용하는 방법대부분의 사람들이 mailto 태그를 사용할 때 수신자 속성만 정의하고 사용할 때가 많다. 하지만 참조,숨은 참조, 제목, 본문 내용까지 이 태그 안에 다 정의할 수가 있다. 이 방법에 대해 간단히 살펴 보도록 하자. 가장 기본적인 형태는 다음과 같다: 1&lt;A href=&quot;mailto:sgj00038@naver.com&quot;&gt;sgj00038에게 이메일을 보내자.&lt;/a&gt; 다음으로는 참조를 삽입해 보자. 단순히 이메일 주소에 ?cc= 부분에 참조 이메일 주소를 적어주면 된다: 1&lt;A href=&quot;mailto:sgj00038@naver.com?cc=another@naver.com&quot;&gt;sgj00038에게 이메일을 보내자.&lt;/a&gt; 이제 여기다 숨은 참조를 붙여보도록 하자: 1&lt;A href=&quot;mailto:sgj00038@naver.com?cc=another@naver.com&amp;bcc=theother@naver.com&quot;&gt;sgj00038에게 이메일을 보내자.&lt;/a&gt; 이번엔 여러 사람에게 메일을 보내는 경우를 살펴 보자: 123&lt;A href=&quot;mailto:sgj00038@naver.com,another@naver.com?cc=another0120@naver.com,sgj00038@naver.com&amp;bcc=theother@naver.com&quot;&gt;sgj00038에게 이메일을 보내자.&lt;/a&gt; 이제 제목란에 적당한 제목을 붙여 보도록 하자: 1&lt;A href=&quot;mailto:sgj00038@naver.com?cc=another@naver.com&amp;bcc=theother@naver.com&amp;subject=문의가 있습니다!&quot;&gt;sgj00038에게 이메일을 보내자.&lt;/a&gt; 이제 여기에 메일 본문 내용까지 붙여보도록 하자: 1&lt;A href=&quot;mailto:sgj00038@naver.com?cc=another@naver.com&amp;bcc=theother@naver.com&amp;subject=문의가 있습니다!&amp;body=mailto 태그 사용 방법에 대해 자세히 알고 싶습니다&quot;&gt;sgj00038에게 이메일을 보내자.&lt;/a&gt; 출처 : jdmastermind.tistory.com","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"HTML","slug":"Programming/HTML","permalink":"https://dullyshin.github.io/categories/Programming/HTML/"}],"tags":[{"name":"Mailto 태그","slug":"Mailto-태그","permalink":"https://dullyshin.github.io/tags/Mailto-태그/"},{"name":"html tags","slug":"html-tags","permalink":"https://dullyshin.github.io/tags/html-tags/"},{"name":"html 태그","slug":"html-태그","permalink":"https://dullyshin.github.io/tags/html-태그/"}]},{"title":"MarkdownEditor","slug":"Github-MarkdownEditor","date":"2018-08-26T15:19:53.000Z","updated":"2018-08-26T18:38:54.810Z","comments":true,"path":"2018/08/27/Github-MarkdownEditor/","link":"","permalink":"https://dullyshin.github.io/2018/08/27/Github-MarkdownEditor/","excerpt":"","text":"마크다운 에디터 / Markdown Editors잘 이해가 안가고 어떻게 사용해야 할지 모르겠다 또는 위와 같은 방법을 손으로 직접 작성하기보다 클릭 몇 번으로 사용하고 싶다. 이러한 분을을 위해 마크 다운 에디터 2가지를 추천합니다! Haroopad지금 현재 사용하고 있는 에디터 입니다. 영어 천지인 프로그램 개발환경에 한국에 찾기가 힘든데.. 한국어라 행복합니다.. 왼쪽에 쓰는것을 바탕으로 오른쪽에서 실시간으로 확인할 수 있습니다. 하이튼 행복해요. 개발자 @Rhiokim님 감사합니다.아직 Markdown에 익숙하지 않은 분, 개발 초보자들을 위해 추천합니다! Haroopad 다운로드 하루패드는 웹 친화적인 문서를 작성하기 위한 마크다운 에디터입니다. 여러분은 간단한 마크다운 문법을 이용해 웹 문서를 생성하거나 블로그, 이메일 그리고 복잡한 리포트 문서를 작성할 수 있습니다. 그리고 하루패드는 윈도우, 리눅스, 맥을 지원하여 여러분이 원하는 플랫폼에서 똑같은 문서 편집 경험을 얻을 수 있습니다. Mou Mou는 가장 유명한 무료 마크다운 에디터 입니다. 입문용으로 추천합니다. 세련된 디자인과 풍부한 기능을 가지고 있습니다. Mou 다운로드 마크다운 추천 사이트 / Markdown siteMarkdown table generator에서 아주 편하게 markdown 테이블을 만들어 낼 수 있습니다.","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"Github","slug":"Programming/Github","permalink":"https://dullyshin.github.io/categories/Programming/Github/"}],"tags":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/tags/Programming/"},{"name":"Github","slug":"Github","permalink":"https://dullyshin.github.io/tags/Github/"},{"name":"markdown Editors","slug":"markdown-Editors","permalink":"https://dullyshin.github.io/tags/markdown-Editors/"},{"name":"마크다운 에디터","slug":"마크다운-에디터","permalink":"https://dullyshin.github.io/tags/마크다운-에디터/"},{"name":"마크다운 테이블","slug":"마크다운-테이블","permalink":"https://dullyshin.github.io/tags/마크다운-테이블/"}]},{"title":"Hexo Theme Hueman","slug":"Hexo-Theme","date":"2018-08-26T03:57:16.000Z","updated":"2018-08-26T18:41:00.841Z","comments":true,"path":"2018/08/26/Hexo-Theme/","link":"","permalink":"https://dullyshin.github.io/2018/08/26/Hexo-Theme/","excerpt":"","text":"Hexo Theme Hueman지금 Hexo Theme Hueman 설정을 어떻게 하는지 알아보도록 하겠습니다.테마를 적용하시려면 아래의 링크를 들어가서 확인 부탁드리겠습니다. 제가 Hexo 시작할때 큰 도움을 받은 곳 입니다.Hexo Hueman 테마 적용하기 Menu 메뉴 메뉴는 마카이브, 카테고리, 커스텀 페이지로 직접 연결합니다. 메뉴는 간단하게 이름을 추가하거나 링크 주소를 메뉴에 추가합니다. 1234menu: Home: /hexo-theme-hueman/ About: /hexo-theme-hueman/about/index.html+ GitHub: https://github.com 상대주소와 절대주소를 모두 사용할 수 있습니다. Hueman은 메뉴안 카테고리에 쉽게 추가할 수 있습니다. 그냥 카테고리를 추가하세요 그리면 메뉴와 서브 카테고리가 추가될 것 입니다. 1234menu: Home: /hexo-theme-hueman/+ Categories: About: /hexo-theme-hueman/about/index.html 커스터마이즈테마를 수정해서 커스터마이즈 할 수 있습니다. Logo 로고원하는 이미지를 가지고 로고를 바꿀 수 있습니다. 이미지 크기는 픽셀로 설정되있습니다. 그리고 url에 파일 경로를 입력해주세요. 1234logo: width: 165 height: 60 url: images/logo-header.png ‘width’와 ‘height’에 숫자만 입력해세요. 다른 설정을 입력해도 작동하지 않습니다. Theme Color 테마 컬러링크의 색과 소셜링크 색을 변경할 수 있습니다. RGB로 색을 바꿀 수 있습니다. 1theme_color: &apos;#d35&apos; Highlight 하이라이트 60가지 넘는 하이라이트 설정을 할 수 있습니다. 코드 블럭안에 색 설정을 말합니다. ‘hueman/source/css/_highlight’ 폴더에 들어가면 가능한 옵션을 확인 할 수 있습니다. 12- highlight: androidstudio+ highlight: tomorrow Sidebar 사이드 바사이드바의 위치를 조정할 수 있습니다. 옵션은 ‘left’ &amp; ‘right’ 2가지 입니다.. 1sidebar: left Thumbnail 썸네일포스트의 썸네일 표시를 사용하지 않을 수도 있습니다. 옵션은 ‘true’와 ‘false’ 입니다. 1thumbnail: true 어떻게 썸네일 이미지를 넣을 수 있을까요?Hueman은 자동으로 당신의 포스트의 첫번째 이미지를 썸네일로 사용할 것입니다. 아니면 포스트의 자동으로 추가되는 front-matter부분에서 이미지를 직접 지정할 수 있습니다. 123title: Hello Worlddate: 2013/7/13 20:46:25+ thumbnail: https://example.com/image.jpg Favicon 파비콘파비콘을 사이트에 추가해 봅시다. 12favicon: favicon.pnge.g: 만약 파비콘 이미지를 source/css/images에 넣었다면, Path 설정을 &quot;css/image/favicon.png&quot; 으로 설정합니다. Social Links 소셜링크 소셜링크는 사이드 바 위쪽에서 확인 할 수 있습니다. 링크 이름과 링크 주소를 설정에 추가 할 수 있고 FontAwesome icon 에서 고를 수 있습니다. 123social_links: github: https://github.com/ppoffice/hexo-theme-hueman+ youtube: https://youtube.com 참고 &amp; 출처https://github.com/ppoffice/hexo-theme-hueman/wiki/Themehttps://futurecreator.github.io/2016/06/14/hexo-apply-hueman-theme/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://dullyshin.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://dullyshin.github.io/tags/Hexo/"},{"name":"Hexo Theme Hueman","slug":"Hexo-Theme-Hueman","permalink":"https://dullyshin.github.io/tags/Hexo-Theme-Hueman/"},{"name":"Hexo Theme","slug":"Hexo-Theme","permalink":"https://dullyshin.github.io/tags/Hexo-Theme/"},{"name":"Hueman 사용법","slug":"Hueman-사용법","permalink":"https://dullyshin.github.io/tags/Hueman-사용법/"}]},{"title":"Hexo error","slug":"Hexo-error","date":"2018-08-26T03:57:16.000Z","updated":"2018-08-26T18:40:03.856Z","comments":true,"path":"2018/08/26/Hexo-error/","link":"","permalink":"https://dullyshin.github.io/2018/08/26/Hexo-error/","excerpt":"","text":"Hexo Error1$ Hexo server Hexo server를 시작하고 http://localhost:4000 에서 메뉴가 About이 아니라 Quant a , Home이 Inici로 보일 수 있습니다. 또는 다른 언어로 보일 수 있습니다. 메뉴 화면 myBlog\\themes\\hueman\\languages\\ca.yml12345678index: home: &apos;Inici&apos; about: &apos;Quant a&apos; search: &apos;Cercar&apos; archive: &apos;Arxiu&apos; category: &apos;Categoria&apos; uncategorized: &apos;Sense categoria&apos; tag: &apos;Etiqueta&apos; 이는 _config.yml에 언어 설정으로 인해 변경될 수 있습니다. 아래의 language 설정을 en으로 바꾸어 주시면 됩니다. 12345678# Sitetitle: Hyejin Shin #제목subtitle: IT blog / Thanks to everyone! #부제목description: IT blog for everyone #설명keywords: Portfolio, programmer, web #키워드author: Hyejin Shin #이름language: en #언어 설정timezone: Asia/Seoul #시간 설정 저는 언어 설정을 처음부터 en으로 했는데도 되지 않아서 구글링으로 해결책을 찾아보았는데요. 변경한 후에도 언어 설정이 적용되지 않을 경우, http://localhost:4000 에서만 적용되지 않고 배포한 파일은 정상적으로 작동될 수 있습니다. 잠시 후 실행된 서버를 끄고 배포한 파일은 정상 작동되는 것을 확인했습니다. Hexo 언어설정으로 고생하는 분 없길 바랍니다!","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://dullyshin.github.io/categories/Hexo/"}],"tags":[{"name":"hexo 에러","slug":"hexo-에러","permalink":"https://dullyshin.github.io/tags/hexo-에러/"},{"name":"헥소 언어 설정","slug":"헥소-언어-설정","permalink":"https://dullyshin.github.io/tags/헥소-언어-설정/"},{"name":"hexo language set","slug":"hexo-language-set","permalink":"https://dullyshin.github.io/tags/hexo-language-set/"}]},{"title":"Hexo 처음 포스트하기","slug":"Hexo-hello-world","date":"2018-08-25T16:23:03.687Z","updated":"2018-08-25T16:43:38.143Z","comments":true,"path":"2018/08/26/Hexo-hello-world/","link":"","permalink":"https://dullyshin.github.io/2018/08/26/Hexo-hello-world/","excerpt":"","text":"Hexo를 시작한 것을 환영합니다! 더 많은 정보를 원하신다면 documentation를 확인해보세요 . Hexo를 사용하실때 불편함을 느끼셨다면, troubleshooting 여기에서 답을 찾을 수 있어요 아니면 GitHub을 통해 질문해주세요. Quick Start 빠른 시작Create a new post 새로운 포스트 만들기1$ hexo new \"My New Post\" More info: Writing Run server 서버 시작하기1$ hexo server More info: Server Generate static files 정적인 파일들 생성하기1$ hexo generate More info: Generating Deploy to remote sites 원격 사이트들 배포하기1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://dullyshin.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dullyshin.github.io/tags/hexo/"}]},{"title":"markdown","slug":"Github-markdown","date":"2018-08-25T05:32:45.000Z","updated":"2018-08-26T18:42:28.398Z","comments":true,"path":"2018/08/25/Github-markdown/","link":"","permalink":"https://dullyshin.github.io/2018/08/25/Github-markdown/","excerpt":"","text":"Markdown 사용법마크다운 / Markdown?Github을 사용하시면 README.md 파일을 통해 만나게 됩니다.마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법입니다. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰입니다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능합니다. 마크다운 사용법 / Markdown Syntax큰 제목 This is an H112큰 제목 This is an H1====================== 작은 제목 This is an H212작은 제목 This is an H2------------- 글머리: 1~6까지만 지원합니다. This is a H1This is a H2This is a H3This is a H4This is a H5This is a H6123456# This is a H1## This is a H2### This is a H3#### This is a H4##### This is a H5###### This is a H6 테이블 Markdown table generator에서 아주 편하게 markdown 테이블을 만들어 낼 수 있습니다. dosi sales sale_date seoul 1500 2015/02/02 pusan 1200 2015/01/01 pusan 1100 2015/02/08 inchon 500 2015/01/30 123456| dosi | sales | sale_date ||--------|-------|------------|| seoul | 1500 | 2015/02/02 || pusan | 1200 | 2015/01/01 || pusan | 1100 | 2015/02/08 || inchon | 500 | 2015/01/30 | 인용문 BlockQuote : 이메일에서 사용하는 &gt; 블럭인용문자를 이용합니다. This is a blockqute. 1&gt; This is a blockqute. 목록 List : 숫자를 순서대로 작성하지 않아도 내림차순으로 정렬됩니다. First Second Third 1231. First2. Second3. Third 빨강 녹색 파랑 빨강 노랑 파랑 빨강 노랑 파랑 1234567891011* 빨강 * 노랑 * 파랑+ 빨강 + 노랑 + 파랑- 빨강 - 노랑 - 파랑 수평선 : 아래와 같은 다양한 방법이 있습니다. 123456789* * *********- - ---------------------------------------- 링크 Googlehttp://example.com/ 12[Google](http://google.com)&lt;http://example.com/&gt; 글꼴 스타일 single asteriskssingle underscoresdouble asterisksdouble underscores++underline++cancelline 123456*single asterisks*_single underscores_**double asterisks**__double underscores__++underline++~~cancelline~~ 이미지 12![카카오 라이언](https://t1.daumcdn.net/cfile/tistory/24923A33597F7BB71E)이미지 사이즈 조절 방법 : &lt;img width=&quot;&quot; height=&quot;&quot;&gt;&lt;/img&gt; 마크다운 Tip / Markdown Tip마크다운에서는 엔터키 한 번은 먹지 않는다. 문장이 같은 줄에 연이어 표시된다. 줄바꿈은 빈 칸 두 개로 구분한다. 문단과 문단 사이는 빈 줄(엔터키 두 번)로 구분한다. 다음 포스트에 마크다운 에디터를 추천합니다.&lt;%- list_related_posts([options]) %&gt; 참조https://ko.wikipedia.org/ https://nolboo.kim/blog/2013/09/07/john-gruber-markdown/ https://gist.github.com/ihoneymon/652be052a0727ad59601 http://macnews.tistory.com/2419","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"Github","slug":"Programming/Github","permalink":"https://dullyshin.github.io/categories/Programming/Github/"}],"tags":[{"name":"마크다운 에디터","slug":"마크다운-에디터","permalink":"https://dullyshin.github.io/tags/마크다운-에디터/"},{"name":"markdown","slug":"markdown","permalink":"https://dullyshin.github.io/tags/markdown/"},{"name":"마크다운 사용법","slug":"마크다운-사용법","permalink":"https://dullyshin.github.io/tags/마크다운-사용법/"},{"name":"마크다운","slug":"마크다운","permalink":"https://dullyshin.github.io/tags/마크다운/"},{"name":"markdown editor","slug":"markdown-editor","permalink":"https://dullyshin.github.io/tags/markdown-editor/"}]},{"title":"SQL basic","slug":"SQL-sqlBasic","date":"2018-05-11T09:36:46.000Z","updated":"2018-08-26T18:37:56.119Z","comments":true,"path":"2018/05/11/SQL-sqlBasic/","link":"","permalink":"https://dullyshin.github.io/2018/05/11/SQL-sqlBasic/","excerpt":"","text":"SQL 기본 문제 &amp; 답 SQL문에 대해 공부하시는 분은 질문을 보고 저와 같이 답을 생각해보시길 바랍니다! 테이블을 생성하고 제약조건 생성 및 연결 스크립트를 작성하세요. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140create table product ( product_id number(6) constraint pk_product primary key, description varchar2(30));create table job ( job_id number(3) constraint pk_job primary key, function varchar2(30));create table location ( location_id number(3) constraint pk_location primary key, regional_group varchar2(20));create table department ( department_id number(3) constraint pk_department primary key, name varchar2(14), location_id number(3) constraint department_location_id_fk references location);create table employee ( employee_id number(4) constraint pk_employee primary key, last_name varchar2(15), first_name varchar2(15), middle_initial varchar2 (1), job_id number(3) constraint employee_job_id_fk references job, manager_id number(4), hire_date date, salary number(7,2), commission number(7,2), department_id number(3) constraint employee_department_id_fk references department );create table customer ( customer_id number(6) constraint pk_customer primary key, name varchar2(45), address varchar2(40), city varchar2 (30), state varchar2 (2), zip_code varchar2 (9), area_code number (3), phone_number number (7), salesperson_id number(4) references employee(employee_id), credit_limit number(3,2), hire_date date, comments long );create table sales_order ( order_id number(4) constraint pk_sales_order primary key, order_date date, name varchar2(14), customer_id number(3) references customer(customer_id), ship_date date, total number(8,2) );create table price ( product_id number(6) constraint price_product_id_fk references product, list_price number(8,2), min_price number(8,2), start_date date, constraint pk_price primary key(start_date, product_id), end_date date );create table item ( order_id number(4) constraint item_order_id_fk references sales_order, item_id number(4), product_id number(6) constraint item_id_fk references product, actual_price number(8,2), quantity number(8), total number(8,2), constraint pk_item primary key(order_id, item_id) ); 1번에서 생성한 테이블중 EMPLOYEES 테이블에 INSERT, UPDATE,DELETE, SELECT 하는 SQL문장과 실행결과를 작성하세요. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263insert intolocation(location_id, regional_group)values(01, &apos;seoul&apos;);insert intolocation(location_id, regional_group)values(02, &apos;busan&apos;);insert intodepartment(department_id, name, location_id)values(1, &apos;accounting&apos;, 02);insert intodepartment(department_id, name, location_id)values(2, &apos;management&apos;, 01);select * from department;insert into job(job_id, function) values(1,&apos;계산&apos;);insert into job(job_id, function) values(2,&apos;연산&apos;);select * from job;select * from department;select * from employee;insert intoemployee(employee_id, last_name, first_name, middle_initial, job_id, manager_id, hire_date, salary, commission, department_id)values(0001, &apos;park&apos;, &apos;smith&apos;, &apos;p&apos;, 1, 0003, sysdate, 10000, 100, 1);update employee set commission = 3000 where employee_id =1;delete from employee where employee_id = 1; TCL을 구별하여 설명하고 EMPLOYEES 테이블에 TCL 명령어의 SQL문장과 실행 결과를 작성하세요. TCL이란 ?TCL(transaction control language)이란 DML(INSERT,UPDATE, DELETE, MERGE)에 의해 변화되는 데이터 관리를 위한 기능 TCL종류 ?COMMIT, ROLLBACK TCL종류 각각 사용 예제 123INSERT INTO EMPLOYEE ( EMPLOYEE_ID, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, COMMISION, DEPARTMENT_ID)VALUES (1000, &apos;LASTNM&apos;, &apos;FIRSTNM&apos;, &apos;FL&apos;, 1, 100, TO_DATE(20180308), 5000000, 500, 10); 1번에서 생성한 제약조건을 조회하는 SQL문장과 실행결과를 작성하세요. (테이블명, 제약조건명, 제약조건 타입 조회할 것) 12345select table_name, constraint_name, constraint_typefrom user_constraintswhere table_name = &apos;EMPLOYEE&apos;; DEPARTMENT 테이블에 부서번호, 부서명을 수강생이름, 주소를 추가하세요. EMPLOYEES 테이블에 위에 입력한 부서번호에 해당하는 사원정보를 INSERT, UPDATE, DELETE, SELECT 하는 SQL문장과 실행결과를 작성하세요. 1234567891011121314151617181920212223242526272829ALTER TABLE department ADD (department_no VARCHAR2(14));ALTER TABLE department ADD (address VARCHAR2(20));INSERT INTO department (DEPARTMENT_ID, NAME, LOCATION_ID) VALUES (3,&apos;총무부&apos;,1);INSERT INTO EMPLOYEE ( EMPLOYEE_ID, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, COMMISSION, DEPARTMENT_ID) VALUES (2000, &apos;BBBBBNM&apos;, &apos;AAAAANM&apos;, &apos;A&apos;, 1, 100, TO_DATE(20180308), 3000, 300, 1);INSERT INTO EMPLOYEE ( EMPLOYEE_ID, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, COMMISSION, DEPARTMENT_ID) VALUES (2, &apos;BBB&apos;, &apos;AAA&apos;, &apos;A&apos;, 2, 2000, TO_DATE(20180503), 3000, 300, 1);UPDATE EMPLOYEE SET HIRE_DATE = TO_DATE(20180309) WHERE EMPLOYEE_ID = 2000;DELETE FROM EMPLOYEE WHERE EMPLOYEE_ID = 2000;SELECT * FROM job;SELECT * FROM EMPLOYEE; 아래의 질문에 SQL문을 작성하세요. EMPLOYEES 테이블에서 수당을 받지 않는 사원들의 부서를 중복값은 제거해서 출력하세요. 123select distinct(department_id) from employeewhere COMMISSION is null; EMPLOYEES 테이블에서 DEPTNO 별로 최대급여를 출력하는데, 최대급여가 높은 것부터 출력하시오 1234567select department_id, max(salary)from employeegroup by department_idorder by max(salary) desc; EMPLOYEES 테이블에서 사원이 2명 이상인 부서에 대해 부서별 평균급여를 계산하시오. 1234567select department_id, avg(salary)from employeegroup by department_idhaving count(*) &gt;=2; EMPLOYEES 테이블에서 입사년도가 1981년보다 큰 사원의 수는? 1select * from employee where hire_date &gt; &apos;1981/01/01&apos;;","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"SQL","slug":"Programming/SQL","permalink":"https://dullyshin.github.io/categories/Programming/SQL/"}],"tags":[{"name":"sql","slug":"sql","permalink":"https://dullyshin.github.io/tags/sql/"},{"name":"query","slug":"query","permalink":"https://dullyshin.github.io/tags/query/"},{"name":"sql 기본","slug":"sql-기본","permalink":"https://dullyshin.github.io/tags/sql-기본/"},{"name":"my sql","slug":"my-sql","permalink":"https://dullyshin.github.io/tags/my-sql/"}]},{"title":"SQL basic","slug":"test","date":"2018-05-11T09:36:46.000Z","updated":"2018-08-26T18:37:56.119Z","comments":true,"path":"2018/05/11/test/","link":"","permalink":"https://dullyshin.github.io/2018/05/11/test/","excerpt":"","text":"SQL 기본 문제 &amp; 답 SQL문에 대해 공부하시는 분은 질문을 보고 저와 같이 답을 생각해보시길 바랍니다! 테이블을 생성하고 제약조건 생성 및 연결 스크립트를 작성하세요. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140create table product ( product_id number(6) constraint pk_product primary key, description varchar2(30));create table job ( job_id number(3) constraint pk_job primary key, function varchar2(30));create table location ( location_id number(3) constraint pk_location primary key, regional_group varchar2(20));create table department ( department_id number(3) constraint pk_department primary key, name varchar2(14), location_id number(3) constraint department_location_id_fk references location);create table employee ( employee_id number(4) constraint pk_employee primary key, last_name varchar2(15), first_name varchar2(15), middle_initial varchar2 (1), job_id number(3) constraint employee_job_id_fk references job, manager_id number(4), hire_date date, salary number(7,2), commission number(7,2), department_id number(3) constraint employee_department_id_fk references department );create table customer ( customer_id number(6) constraint pk_customer primary key, name varchar2(45), address varchar2(40), city varchar2 (30), state varchar2 (2), zip_code varchar2 (9), area_code number (3), phone_number number (7), salesperson_id number(4) references employee(employee_id), credit_limit number(3,2), hire_date date, comments long );create table sales_order ( order_id number(4) constraint pk_sales_order primary key, order_date date, name varchar2(14), customer_id number(3) references customer(customer_id), ship_date date, total number(8,2) );create table price ( product_id number(6) constraint price_product_id_fk references product, list_price number(8,2), min_price number(8,2), start_date date, constraint pk_price primary key(start_date, product_id), end_date date );create table item ( order_id number(4) constraint item_order_id_fk references sales_order, item_id number(4), product_id number(6) constraint item_id_fk references product, actual_price number(8,2), quantity number(8), total number(8,2), constraint pk_item primary key(order_id, item_id) ); 1번에서 생성한 테이블중 EMPLOYEES 테이블에 INSERT, UPDATE,DELETE, SELECT 하는 SQL문장과 실행결과를 작성하세요. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263insert intolocation(location_id, regional_group)values(01, &apos;seoul&apos;);insert intolocation(location_id, regional_group)values(02, &apos;busan&apos;);insert intodepartment(department_id, name, location_id)values(1, &apos;accounting&apos;, 02);insert intodepartment(department_id, name, location_id)values(2, &apos;management&apos;, 01);select * from department;insert into job(job_id, function) values(1,&apos;계산&apos;);insert into job(job_id, function) values(2,&apos;연산&apos;);select * from job;select * from department;select * from employee;insert intoemployee(employee_id, last_name, first_name, middle_initial, job_id, manager_id, hire_date, salary, commission, department_id)values(0001, &apos;park&apos;, &apos;smith&apos;, &apos;p&apos;, 1, 0003, sysdate, 10000, 100, 1);update employee set commission = 3000 where employee_id =1;delete from employee where employee_id = 1; TCL을 구별하여 설명하고 EMPLOYEES 테이블에 TCL 명령어의 SQL문장과 실행 결과를 작성하세요. TCL이란 ?TCL(transaction control language)이란 DML(INSERT,UPDATE, DELETE, MERGE)에 의해 변화되는 데이터 관리를 위한 기능 TCL종류 ?COMMIT, ROLLBACK TCL종류 각각 사용 예제 123INSERT INTO EMPLOYEE ( EMPLOYEE_ID, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, COMMISION, DEPARTMENT_ID)VALUES (1000, &apos;LASTNM&apos;, &apos;FIRSTNM&apos;, &apos;FL&apos;, 1, 100, TO_DATE(20180308), 5000000, 500, 10); 1번에서 생성한 제약조건을 조회하는 SQL문장과 실행결과를 작성하세요. (테이블명, 제약조건명, 제약조건 타입 조회할 것) 12345select table_name, constraint_name, constraint_typefrom user_constraintswhere table_name = &apos;EMPLOYEE&apos;; DEPARTMENT 테이블에 부서번호, 부서명을 수강생이름, 주소를 추가하세요. EMPLOYEES 테이블에 위에 입력한 부서번호에 해당하는 사원정보를 INSERT, UPDATE, DELETE, SELECT 하는 SQL문장과 실행결과를 작성하세요. 1234567891011121314151617181920212223242526272829ALTER TABLE department ADD (department_no VARCHAR2(14));ALTER TABLE department ADD (address VARCHAR2(20));INSERT INTO department (DEPARTMENT_ID, NAME, LOCATION_ID) VALUES (3,&apos;총무부&apos;,1);INSERT INTO EMPLOYEE ( EMPLOYEE_ID, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, COMMISSION, DEPARTMENT_ID) VALUES (2000, &apos;BBBBBNM&apos;, &apos;AAAAANM&apos;, &apos;A&apos;, 1, 100, TO_DATE(20180308), 3000, 300, 1);INSERT INTO EMPLOYEE ( EMPLOYEE_ID, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, JOB_ID, MANAGER_ID, HIRE_DATE, SALARY, COMMISSION, DEPARTMENT_ID) VALUES (2, &apos;BBB&apos;, &apos;AAA&apos;, &apos;A&apos;, 2, 2000, TO_DATE(20180503), 3000, 300, 1);UPDATE EMPLOYEE SET HIRE_DATE = TO_DATE(20180309) WHERE EMPLOYEE_ID = 2000;DELETE FROM EMPLOYEE WHERE EMPLOYEE_ID = 2000;SELECT * FROM job;SELECT * FROM EMPLOYEE; 아래의 질문에 SQL문을 작성하세요. EMPLOYEES 테이블에서 수당을 받지 않는 사원들의 부서를 중복값은 제거해서 출력하세요. 123select distinct(department_id) from employeewhere COMMISSION is null; EMPLOYEES 테이블에서 DEPTNO 별로 최대급여를 출력하는데, 최대급여가 높은 것부터 출력하시오 1234567select department_id, max(salary)from employeegroup by department_idorder by max(salary) desc; EMPLOYEES 테이블에서 사원이 2명 이상인 부서에 대해 부서별 평균급여를 계산하시오. 1234567select department_id, avg(salary)from employeegroup by department_idhaving count(*) &gt;=2; EMPLOYEES 테이블에서 입사년도가 1981년보다 큰 사원의 수는? 1select * from employee where hire_date &gt; &apos;1981/01/01&apos;;","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"SQL","slug":"Programming/SQL","permalink":"https://dullyshin.github.io/categories/Programming/SQL/"}],"tags":[{"name":"sql","slug":"sql","permalink":"https://dullyshin.github.io/tags/sql/"},{"name":"query","slug":"query","permalink":"https://dullyshin.github.io/tags/query/"},{"name":"sql 기본","slug":"sql-기본","permalink":"https://dullyshin.github.io/tags/sql-기본/"},{"name":"my sql","slug":"my-sql","permalink":"https://dullyshin.github.io/tags/my-sql/"}]},{"title":"SQL Advanced","slug":"SQL-sqlAdvanced","date":"2018-05-11T07:45:10.000Z","updated":"2018-08-26T18:38:02.223Z","comments":true,"path":"2018/05/11/SQL-sqlAdvanced/","link":"","permalink":"https://dullyshin.github.io/2018/05/11/SQL-sqlAdvanced/","excerpt":"","text":"고급 SQL 실습sales , geography 테이블, 데이터 직접 생성하신 후 실습하세요.(이미 있다면 삭제 후 생성해주세요.) 아래의 SQL을 실행한 후에 문제에 답을 생각해봅시다.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849drop table sales;drop table geography;create table sales ( dosi varchar2(20), sales number, sale_date date) ;INSERT INTO sales (dosi,sales,sale_date) values (&apos;seoul&apos;,1500,&apos;2015/02/02&apos;);INSERT INTO sales (dosi,sales,sale_date) values (&apos;pusan&apos;,1200,&apos;2015/01/01&apos;);INSERT INTO sales (dosi,sales,sale_date) values (&apos;pusan&apos;,1100,&apos;2015/02/08&apos;);INSERT INTO sales (dosi,sales,sale_date) values (&apos;inchon&apos;,500,&apos;2015/01/30&apos;);create table geography ( region varchar2(10), dosi varchar2(20)) ;INSERT INTO geography (region,dosi) VALUES (&apos;east&apos;,&apos;pusan&apos;);INSERT INTO geography (region,dosi) VALUES (&apos;east&apos;,&apos;sokcho&apos;);INSERT INTO geography (region,dosi) VALUES (&apos;west&apos;,&apos;seoul&apos;);INSERT INTO geography (region,dosi) VALUES (&apos;west&apos;,&apos;inchon&apos;);COMMIT; 위의 쿼리문을 잘 따라하셨으면 아래의 테이블과 같은 결과를 확인할 수 있습니다. sales 테이블 조회 결과 dosi sales sale_date seoul 1500 2015/02/02 pusan 1200 2015/01/01 pusan 1100 2015/02/08 inchon 500 2015/01/30 geography 테이블 조회 결과 region dosi east pusan east sokcho west seoul west inchon 문제 sales,geography 테이블에 PK Index, Normal Index 를 생성 후 인덱스를 조회하는 SQL문장과 실행결과를 작성하세요. 12345678910111213141516171819202122232425CREATE UNIQUE INDEX IDX_GEOGRAPHY_REGION_DOSI ON GEOGRAPHY(REGION, DOSI);CREATE INDEX IDX_SALES_DOSI ON SALES(DOSI);SELECT A.INDEX_NAMEFROM USER_IND_COLUMNS A , USER_INDEXES BWHERE A.TABLE_NAME = &apos;SALES&apos; AND A.INDEX_NAME = B.INDEX_NAME AND A.COLUMN_NAME = &apos;DOSI&apos;;INDEX_NAME--------------------IDX_SALES_DOSISELECT A.INDEX_NAMEFROM USER_IND_COLUMNS A, USER_INDEXES BWHERE A.TABLE_NAME = &apos;GEOGRAPHY&apos; AND A.INDEX_NAME = B.INDEX_NAME AND A.COLUMN_NAME = &apos;REGION&apos;;INDEX_NAME--------------------IDX_GEOGRAPHY_REGION_DOSI sales, geography 테이블을 조인하여 조회하는 뷰를 생성하는 SQL문장을 작성하세요. 123456CREATE OR REPLACE VIEW V_SALES_GEOGRAPHY (SALES, DOSI, SALES_DATE, REGION)ASSELECT S.SALES, S.DOSI, S.SALE_DATE, G.REGIONFROM SALES S, GEOGRAPHY GWHERE S.DOSI = G.DOSIORDER BY S.DOSI; 다음 결과를 출력하는 SQL을 작성하세요.(집합연산자 사용) 기간별, 지역별 매출합계 yyyymm region sales 201501 east 1200 201501 west 500 201502 east 1100 201502 west 1500 조인 SQL문장 1234567SELECT TO_CHAR(S.SALE_DATE, &apos;YYYYMM&apos;) AS YYYYMM , G.REGION , SUM(S.SALES) AS SALESFROM SALES S , GEOGRAPHY GWHERE S.DOSI = G.DOSIGROUP BY TO_CHAR(S.SALE_DATE,&apos;YYYYMM&apos;), G.REGION; 서브쿼리 SQL문장 1234567SELECT TO_CHAR(S. SALE_DATE, &apos;YYYYMM&apos;) AS YYYYMM , ( SELECT REGION FROM GEOGRAPHY G WHERE G.DOSI = S.DOSI ) REGION , S.SALESFROM SALES SORDER BY TO_CHAR(S.SALE_DATE,&apos;YYYYMM&apos;), REGION ASC; 도시별 매출합계 아래 결과를 조인쿼리로 작성해 보세요. dosi sales sokcho 매출없음 inchon 500 pusan 2300 seoul 1500 123456789101112SELECT G.DOSI , NVL( TO_CHAR(Z.SUM_SALES), &apos;매출없음&apos; )FROM GEOGRAPHY GLEFT OUTER JOIN ( SELECT DOSI , SUM(SALES) AS SUM_SALES FROM SALES GROUP BY DOSI ORDER BY DOSI) ZON G.DOSI = Z.DOSIORDER BY Z.SUM_SALES ASC NULLS FIRST; 도시별 매출합계 아래 결과를 from 절에 geography 테이블 하나만 위치시키고 쿼리를 작성해 보세요. dosi sales sokcho 매출없음 inchon 500 pusan 2300 seoul 1500 1234567SELECT G.DOSI AS DOSI , NVL(( SELECT TO_CHAR( SUM(S.SALES) ) FROM SALES S GROUP BY S.DOSI HAVING G.DOSI = DOSI), &apos;매출없음&apos;) AS SALESFROM GEOGRAPHY GORDER BY SALES DESC NULLS FIRST; WITH구문을 이용하여 다음 결과를 출력하는 SQL을 작성하세요. (지역별, 기간별(월별) 합계를 출력하는데 월별매출액이 1200 이상 데이터 추출) region yyyymm sales east 201501 1200 east 201501 1200 12345678910WITH W_SALES AS ( SELECT G.REGION , TO_CHAR(S.SALE_DATE,&apos;YYYYMM&apos;) YYYYMM , S.SALES FROM SALES S, GEOGRAPHY G WHERE S.DOSI = G.DOSI AND S.SALES &gt;= 1200 ORDER BY G.REGION, TO_CHAR(S.SALE_DATE,&apos;YYYYMM&apos;))SELECT * FROM W_SALES;","categories":[{"name":"Programming","slug":"Programming","permalink":"https://dullyshin.github.io/categories/Programming/"},{"name":"SQL","slug":"Programming/SQL","permalink":"https://dullyshin.github.io/categories/Programming/SQL/"}],"tags":[{"name":"sql","slug":"sql","permalink":"https://dullyshin.github.io/tags/sql/"},{"name":"query","slug":"query","permalink":"https://dullyshin.github.io/tags/query/"},{"name":"my sql","slug":"my-sql","permalink":"https://dullyshin.github.io/tags/my-sql/"}]}]}